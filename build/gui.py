
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import shutil
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import font
import cv2
import numpy as np
import pandas as pd
import numpy as np
import cv2
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import f1_score


from PIL import Image
import glob

import matplotlib.pyplot as plt
import matplotlib.image as mpimg


from PIL import ImageTk, Image
from io import BytesIO
import base64
from keras.models import load_model
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
from PIL import ImageTk,Image  
OUTPUT_PATH = Path(__file__).parent
##ASSETS_PATH = OUTPUT_PATH / Path("./assets")
ASSETS_PATH = "C:/Users/skana/Desktop/final_python_project/Celebrity-Face-Recognition/build/assets"

global new_model 
new_model = load_model('C:/Users/skana/Desktop/final_python_project/Celebrity-Face-Recognition/')

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



def chng():
    global img1,my_img
    img1 = Image.open("image.jpg")


    # The (450, 350) is (height, width)
    img1 = img1.resize((300, 400), Image.ANTIALIAS)
    my_img = ImageTk.PhotoImage(img1)


    canvas.itemconfig(image_3, image=my_img)


def prediction(img_name):
    print('enter')
    
    
    path=r'C:/Users/skana/Desktop/final_python_project/Celebrity-Face-Recognition/build/'+img_name
    pathD=r'C:/Users/skana/Desktop/final_python_project/Celebrity-Face-Recognition/build/image.jpg'
    
    class_names = ['pins_Adriana Lima', 'pins_Alex Lawther', 'pins_Alexandra Daddario', 'pins_Alvaro Morte', 'pins_Amanda Crew', 'pins_Andy Samberg', 'pins_Anne Hathaway', 'pins_Anthony Mackie', 'pins_Avril Lavigne', 'pins_Ben Affleck', 'pins_Bill Gates', 'pins_Bobby Morley', 'pins_Brenton Thwaites', 'pins_Brian J. Smith', 'pins_Brie Larson', 'pins_Chris Evans', 'pins_Chris Hemsworth', 'pins_Chris Pratt', 'pins_Christian Bale', 'pins_Cristiano Ronaldo', 'pins_Danielle Panabaker', 'pins_Dominic Purcell', 'pins_Dwayne Johnson', 'pins_Eliza Taylor', 'pins_Elizabeth Lail', 'pins_Emilia Clarke', 'pins_Emma Stone', 'pins_Emma Watson', 'pins_Gwyneth Paltrow', 'pins_Henry Cavil', 'pins_Hugh Jackman', 'pins_Inbar Lavi', 'pins_Irina Shayk', 'pins_Jake Mcdorman', 'pins_Jason Momoa', 'pins_Jennifer Lawrence', 'pins_Jeremy Renner', 'pins_Jessica Barden', 'pins_Jimmy Fallon', 'pins_Johnny Depp', 'pins_Josh Radnor', 'pins_Katharine Mcphee', 'pins_Katherine Langford', 'pins_Keanu Reeves', 'pins_Krysten Ritter', 'pins_Leonardo DiCaprio', 'pins_Lili Reinhart', 'pins_Lindsey Morgan', 'pins_Lionel Messi', 'pins_Logan Lerman', 'pins_Madelaine Petsch', 'pins_Maisie Williams', 'pins_Maria Pedraza', 'pins_Marie Avgeropoulos', 'pins_Mark Ruffalo', 'pins_Mark Zuckerberg', 'pins_Megan Fox', 'pins_Miley Cyrus', 'pins_Millie Bobby Brown', 'pins_Morena Baccarin', 'pins_Morgan Freeman', 'pins_Nadia Hilker', 'pins_Natalie Dormer', 'pins_Natalie Portman']
    
    img = tf.keras.preprocessing.image.load_img(
    path, target_size=(160, 160)
    )
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0) # Create a batch
    img_array=img_array/255.
    score = new_model.predict(img_array)
    
    print(
    "The Person in the Image is {} ."
    .format(class_names[np.argmax(score)][5:].title())
    )

    image_list = []
    for filename in glob.glob('C:/Users/skana/Desktop/final_python_project/Celebrity-Face-Recognition/105_classes_pins_dataset/pins_'+class_names[np.argmax(score)][5:]+'/*.jpg'): #assuming gif
        shutil.move(filename, pathD)
        break;
    chng()
    entry_1.delete(0, 'end')
    entry_1.insert(0, class_names[np.argmax(score)][5:])
    print("hh")
    



def cam():
    

    cam = cv2.VideoCapture(0)

    cv2.namedWindow("test")

    img_counter = 0

    while True:
        ret, frame = cam.read()
        if not ret:
            print("failed to grab frame")
            break
        cv2.imshow("test", frame)

        k = cv2.waitKey(1)
        if k % 256 == 27:
            # ESC pressed
            print("Escape hit, closing...")
            break
        elif k % 256 == 32:
            # SPACE pressed
            img_name = "opencv_frame_{}.png".format(img_counter)
            cv2.imwrite(img_name, frame)
            print("{} written!".format(img_name))
            img_counter += 1
            prediction(img_name)
            print("closing cam after completing prediction")
            break
            
    
    
    cam.release()

    cv2.destroyAllWindows()
    








window = Tk()

window.geometry("1440x987")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 987,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    1088.0,
    493.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    368.0,
    493.0,
    image=image_image_2
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=cam,
    relief="flat"
)
button_1.place(
    x=134.99999999999994,
    y=798.0,
    width=447.0,
    height=91.0
)

canvas.create_text(
    170,
    80,
    anchor="nw",
    text="Find your twin",
    fill="#38B8B1",
    font=("Corben Bold", 60 * -1)
)

canvas.create_text(
    1039.0,
    743.0,
    anchor="nw",
    text="Name",
    fill="#362E35",
    font=("Roboto BoldItalic", 35 * -1)
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    1097.0,
    489.0,
    image=image_image_3
)

canvas.create_text(
    931.0,
    86.0,
    anchor="nw",
    text="You look like",
    fill="#F293E8",
    font=("Corben Bold", 60 * -1)
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    1096.5,
    834.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0
)
entry_1.place(
    x=928.5,
    y=818.0,
    width=336.0,
    height=31.0
)
window.resizable(False, False)
window.mainloop()




